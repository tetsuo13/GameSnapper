<?php
/**
 * Game browser.
 *
 * @copyright 2011 GameSnapper
 * @since     2011-04-03
 * @author    Andrei Nicholson
 */

require_once '../lib/globals.php';
require_once LIB_DIR . 'lib.htmlTemplate.php';
require_once LIB_DIR . 'lib.db.php';
require_once LIB_DIR . 'lib.gameDisplay.php';
require_once INCLUDE_DIR . 'inc.category.php';

define('GAMES_PER_PAGE', 9);

$template = new htmlTemplate(TEMPLATE_DIR . 'gaming.html');
$template->set('pageTitle', 'GameSnapper Browse');

$pageUrl = $_SERVER['PHP_SELF'];
$selectedCategory = NULL;

if (isset($_GET['category']) && trim((string) $_GET['category']) != '') {
    $selectedCategory = findCategory($category,
                                     trim((string) $_GET['category']));
}

if ($selectedCategory !== NULL) {
    $pageUrl = trim((string) $_GET['category']) . '-games';
}

getGames($template, $selectedCategory);

$template->set('selectedCategory', $selectedCategory);
$template->set('categories', $category);
$template->set('SERVER', $_SERVER);
$template->set('pageUrl', $pageUrl);

try {
    echo $template->execute();
} catch (Exception $e) {
    echo '<pre>', $e->getMessage(), '</pre>';
}

/**
 * @param array  $category
 * @param string $categoryTitle
 *
 * @return int
 */
function findCategory(array $category, $categoryTitle) {
    $categoryTitle = strtolower($categoryTitle);

    foreach ($category as $id => $v) {
        if (strtolower($v['title']) == $categoryTitle) {
            return $id;
        }
    }

    return NULL;
}

/**
 * @param htmlTemplate &$template
 * @param int          $categoryId
 *
 * @return array
 */
function getGames(htmlTemplate &$template, $categoryId) {
    $template->set('games', array());
    $template->set('numPages', 0);
    $template->set('currentPage', 1);

    try {
        $db = new db(db::DEFAULT_DSN, db::READ_ONLY_ACCESS);
        $statement = getSqlStatement($template, $db, $categoryId);

        if ($statement === NULL) {
            return;
        }

        $statement->execute();
        $games = $statement->fetchAll(PDO::FETCH_ASSOC);

        array_walk($games,
                   create_function('&$v',
                                   '$v["description"] = trimText($v["description"], 20);'));

        $template->set('games', $games);
    } catch (Exception $e) {
    }
}

/**
 * @param htmlTemplate &$template
 * @param db           $db
 * @param int          $categoryId
 *
 * @return array
 */
function getSqlStatement(htmlTemplate &$template, db $db, $categoryId) {
    if ($categoryId !== NULL) {
        $numGames = getCategoryNumberOfGames($db, $categoryId);
    } else {
        $numGames = getTotalNumberOfGames($db);
    }

    if ($numGames === NULL) {
        return NULL;
    }

    $currentPage = paginate($template, $numGames);
    $offset = ($currentPage > 1 ? ($currentPage - 1) * GAMES_PER_PAGE : 0);

    if ($categoryId !== NULL) {
        $sql = 'SELECT   title, id, filepath, slug, description, thumbtype
                FROM     game
                JOIN     category_game_xref
                ON       game_id = id
                WHERE    category_id = :categoryId
                ORDER BY played DESC
                LIMIT    ' . GAMES_PER_PAGE . '
                OFFSET   ' . $offset;

        $statement = $db->prepare($sql);
        $statement->bindParam(':categoryId', $categoryId, PDO::PARAM_INT);
    } else {
        $sql = 'SELECT   title, id, filepath, slug, description, thumbtype
                FROM     game
                ORDER BY played DESC
                LIMIT    ' . GAMES_PER_PAGE . '
                OFFSET   ' . $offset;

        $statement = $db->prepare($sql);
    }

    return $statement;
}

/**
 * @param htmlTemplate &$template
 * @param int          $numGames
 *
 * @return int
 */
function paginate(htmlTemplate &$template, $numGames) {
    $currentPage = 1;
    $numPages = ceil($numGames / GAMES_PER_PAGE);

    $template->set('numPages', $numPages);

    if (isset($_GET['page']) && strlen((string) $_GET['page']) >= 2) {
        $requestedPage = (int) substr((string) $_GET['page'], 1);

        if ($requestedPage >= 0 && $requestedPage <= $numPages) {
            $currentPage = $requestedPage;
            $template->set('currentPage', $requestedPage);
        }
    }

    $template->set('previousPage', ($currentPage != 1 ? ($currentPage - 1) : 1));
    $template->set('nextPage', ($currentPage != $numPages ? ($currentPage + 1) : $numPages));

    return $currentPage;
}

/**
 * @param db $db
 *
 * @return int
 */
function getTotalNumberOfGames(db $db) {
    $sql = 'SELECT COUNT(*) AS num_games
            FROM   game';
    $row = $db->query($sql);

    foreach ($row as $x) {
        return $x['num_games'];
    }
}

/**
 * @param db  $db
 * @param int $categoryId
 *
 * @return int
 */
function getCategoryNumberOfGames(db $db, $categoryId) {
    $sql = 'SELECT num_games
            FROM   category
            WHERE  id = :category_id';

    $statement = $db->prepare($sql);
    $statement->bindParam(':category_id', $categoryId, PDO::PARAM_INT);
    $statement->execute();
    $result = $statement->fetch(PDO::FETCH_ASSOC);
    return $result['num_games'];
}

/** vim: set filetype=php: */
